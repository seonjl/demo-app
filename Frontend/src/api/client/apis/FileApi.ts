/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DownloadFile200Response,
  DownloadFileRequest,
  ListFiles200ResponseInner,
  UploadFile200Response,
  UploadFileRequest,
} from '../models/index';
import {
    DownloadFile200ResponseFromJSON,
    DownloadFile200ResponseToJSON,
    DownloadFileRequestFromJSON,
    DownloadFileRequestToJSON,
    ListFiles200ResponseInnerFromJSON,
    ListFiles200ResponseInnerToJSON,
    UploadFile200ResponseFromJSON,
    UploadFile200ResponseToJSON,
    UploadFileRequestFromJSON,
    UploadFileRequestToJSON,
} from '../models/index';

export interface DownloadFileOperationRequest {
    downloadFileRequest: DownloadFileRequest;
}

export interface UploadFileOperationRequest {
    uploadFileRequest: UploadFileRequest;
}

/**
 * 
 */
export class FileApi extends runtime.BaseAPI {

    /**
     * Create a presigned url for download
     * File.download
     */
    async downloadFileRaw(requestParameters: DownloadFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DownloadFile200Response>> {
        if (requestParameters['downloadFileRequest'] == null) {
            throw new runtime.RequiredError(
                'downloadFileRequest',
                'Required parameter "downloadFileRequest" was null or undefined when calling downloadFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/files/download`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DownloadFileRequestToJSON(requestParameters['downloadFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DownloadFile200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a presigned url for download
     * File.download
     */
    async downloadFile(requestParameters: DownloadFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DownloadFile200Response> {
        const response = await this.downloadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list a file
     * File.list
     */
    async listFilesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListFiles200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/files`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListFiles200ResponseInnerFromJSON));
    }

    /**
     * list a file
     * File.list
     */
    async listFiles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListFiles200ResponseInner>> {
        const response = await this.listFilesRaw(initOverrides);
        return await response.value();
    }

    /**
     * upload a file
     * File.upload
     */
    async uploadFileRaw(requestParameters: UploadFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadFile200Response>> {
        if (requestParameters['uploadFileRequest'] == null) {
            throw new runtime.RequiredError(
                'uploadFileRequest',
                'Required parameter "uploadFileRequest" was null or undefined when calling uploadFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/files/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadFileRequestToJSON(requestParameters['uploadFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadFile200ResponseFromJSON(jsonValue));
    }

    /**
     * upload a file
     * File.upload
     */
    async uploadFile(requestParameters: UploadFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadFile200Response> {
        const response = await this.uploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
