/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateChatRequest,
  ListChatrooms200ResponseInner,
  ListChats200ResponseInner,
  V1AuthGoogleRevokePost200Response,
} from '../models/index';
import {
    CreateChatRequestFromJSON,
    CreateChatRequestToJSON,
    ListChatrooms200ResponseInnerFromJSON,
    ListChatrooms200ResponseInnerToJSON,
    ListChats200ResponseInnerFromJSON,
    ListChats200ResponseInnerToJSON,
    V1AuthGoogleRevokePost200ResponseFromJSON,
    V1AuthGoogleRevokePost200ResponseToJSON,
} from '../models/index';

export interface CreateChatOperationRequest {
    roomId: string;
    createChatRequest: CreateChatRequest;
}

export interface ListChatsRequest {
    roomId: string;
    limit?: string;
    createdAt?: string;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     * Create a chats
     * Chat.create
     */
    async createChatRaw(requestParameters: CreateChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AuthGoogleRevokePost200Response>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling createChat().'
            );
        }

        if (requestParameters['createChatRequest'] == null) {
            throw new runtime.RequiredError(
                'createChatRequest',
                'Required parameter "createChatRequest" was null or undefined when calling createChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/chatrooms/{room_id}/chats`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatRequestToJSON(requestParameters['createChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AuthGoogleRevokePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a chats
     * Chat.create
     */
    async createChat(requestParameters: CreateChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AuthGoogleRevokePost200Response> {
        const response = await this.createChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List chatrooms
     * Chatroom.list
     */
    async listChatroomsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListChatrooms200ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/chatrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListChatrooms200ResponseInnerFromJSON));
    }

    /**
     * List chatrooms
     * Chatroom.list
     */
    async listChatrooms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListChatrooms200ResponseInner>> {
        const response = await this.listChatroomsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List chats
     * Chat.list
     */
    async listChatsRaw(requestParameters: ListChatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListChats200ResponseInner>>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling listChats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = requestParameters['createdAt'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/chatrooms/{room_id}/chats`.replace(`{${"room_id"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListChats200ResponseInnerFromJSON));
    }

    /**
     * List chats
     * Chat.list
     */
    async listChats(requestParameters: ListChatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListChats200ResponseInner>> {
        const response = await this.listChatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
