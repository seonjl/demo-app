/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateIssueRequest,
  ListIssues200ResponseInner,
  UpdateIssueRequest,
  V1AuthGoogleRevokePost200Response,
} from '../models/index';
import {
    CreateIssueRequestFromJSON,
    CreateIssueRequestToJSON,
    ListIssues200ResponseInnerFromJSON,
    ListIssues200ResponseInnerToJSON,
    UpdateIssueRequestFromJSON,
    UpdateIssueRequestToJSON,
    V1AuthGoogleRevokePost200ResponseFromJSON,
    V1AuthGoogleRevokePost200ResponseToJSON,
} from '../models/index';

export interface CreateIssueOperationRequest {
    createIssueRequest: CreateIssueRequest;
}

export interface DeleteIssueRequest {
    issueId: string;
}

export interface ListIssuesRequest {
    all?: boolean;
}

export interface SubscribeIssueRequest {
    issueId: string;
    requestBody: { [key: string]: any; };
}

export interface UnsubscribeIssueRequest {
    issueId: string;
    requestBody: { [key: string]: any; };
}

export interface UpdateIssueOperationRequest {
    issueId: string;
    updateIssueRequest: UpdateIssueRequest;
}

/**
 * 
 */
export class IssueApi extends runtime.BaseAPI {

    /**
     * Create a issue
     * Issue.create
     */
    async createIssueRaw(requestParameters: CreateIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AuthGoogleRevokePost200Response>> {
        if (requestParameters['createIssueRequest'] == null) {
            throw new runtime.RequiredError(
                'createIssueRequest',
                'Required parameter "createIssueRequest" was null or undefined when calling createIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/issues`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateIssueRequestToJSON(requestParameters['createIssueRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AuthGoogleRevokePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a issue
     * Issue.create
     */
    async createIssue(requestParameters: CreateIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AuthGoogleRevokePost200Response> {
        const response = await this.createIssueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a issue
     * Issue.delete
     */
    async deleteIssueRaw(requestParameters: DeleteIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AuthGoogleRevokePost200Response>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling deleteIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/issues/{issueId}`.replace(`{${"issueId"}}`, encodeURIComponent(String(requestParameters['issueId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AuthGoogleRevokePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a issue
     * Issue.delete
     */
    async deleteIssue(requestParameters: DeleteIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AuthGoogleRevokePost200Response> {
        const response = await this.deleteIssueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List issues
     * Issue.list
     */
    async listIssuesRaw(requestParameters: ListIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListIssues200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['all'] != null) {
            queryParameters['all'] = requestParameters['all'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/issues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListIssues200ResponseInnerFromJSON));
    }

    /**
     * List issues
     * Issue.list
     */
    async listIssues(requestParameters: ListIssuesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListIssues200ResponseInner>> {
        const response = await this.listIssuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Subscribe a issue
     * Issue.subscribe
     */
    async subscribeIssueRaw(requestParameters: SubscribeIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AuthGoogleRevokePost200Response>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling subscribeIssue().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling subscribeIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/issues/{issueId}/subscribe`.replace(`{${"issueId"}}`, encodeURIComponent(String(requestParameters['issueId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AuthGoogleRevokePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Subscribe a issue
     * Issue.subscribe
     */
    async subscribeIssue(requestParameters: SubscribeIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AuthGoogleRevokePost200Response> {
        const response = await this.subscribeIssueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unsubscribe a issue
     * Issue.unsubscribe
     */
    async unsubscribeIssueRaw(requestParameters: UnsubscribeIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AuthGoogleRevokePost200Response>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling unsubscribeIssue().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling unsubscribeIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/issues/{issueId}/unsubscribe`.replace(`{${"issueId"}}`, encodeURIComponent(String(requestParameters['issueId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AuthGoogleRevokePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Unsubscribe a issue
     * Issue.unsubscribe
     */
    async unsubscribeIssue(requestParameters: UnsubscribeIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AuthGoogleRevokePost200Response> {
        const response = await this.unsubscribeIssueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a issue
     * Issue.update
     */
    async updateIssueRaw(requestParameters: UpdateIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AuthGoogleRevokePost200Response>> {
        if (requestParameters['issueId'] == null) {
            throw new runtime.RequiredError(
                'issueId',
                'Required parameter "issueId" was null or undefined when calling updateIssue().'
            );
        }

        if (requestParameters['updateIssueRequest'] == null) {
            throw new runtime.RequiredError(
                'updateIssueRequest',
                'Required parameter "updateIssueRequest" was null or undefined when calling updateIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/issues/{issueId}`.replace(`{${"issueId"}}`, encodeURIComponent(String(requestParameters['issueId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIssueRequestToJSON(requestParameters['updateIssueRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AuthGoogleRevokePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a issue
     * Issue.update
     */
    async updateIssue(requestParameters: UpdateIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AuthGoogleRevokePost200Response> {
        const response = await this.updateIssueRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
