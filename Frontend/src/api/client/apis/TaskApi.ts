/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTaskRequest,
  ListTasks200ResponseInner,
  UpdateTaskRequest,
  V1AuthGoogleRevokePost200Response,
} from '../models/index';
import {
    CreateTaskRequestFromJSON,
    CreateTaskRequestToJSON,
    ListTasks200ResponseInnerFromJSON,
    ListTasks200ResponseInnerToJSON,
    UpdateTaskRequestFromJSON,
    UpdateTaskRequestToJSON,
    V1AuthGoogleRevokePost200ResponseFromJSON,
    V1AuthGoogleRevokePost200ResponseToJSON,
} from '../models/index';

export interface CreateTaskOperationRequest {
    createTaskRequest: CreateTaskRequest;
}

export interface DeleteTaskRequest {
    taskId: string;
}

export interface ListTasksRequest {
    createdAt?: string;
    createdAt2?: string;
}

export interface UpdateTaskOperationRequest {
    taskId: string;
    updateTaskRequest: UpdateTaskRequest;
}

/**
 * 
 */
export class TaskApi extends runtime.BaseAPI {

    /**
     * Create a task
     * Task.create
     */
    async createTaskRaw(requestParameters: CreateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AuthGoogleRevokePost200Response>> {
        if (requestParameters['createTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'createTaskRequest',
                'Required parameter "createTaskRequest" was null or undefined when calling createTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskRequestToJSON(requestParameters['createTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AuthGoogleRevokePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a task
     * Task.create
     */
    async createTask(requestParameters: CreateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AuthGoogleRevokePost200Response> {
        const response = await this.createTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a task
     * Task.delete
     */
    async deleteTaskRaw(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AuthGoogleRevokePost200Response>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling deleteTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tasks/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AuthGoogleRevokePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete a task
     * Task.delete
     */
    async deleteTask(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AuthGoogleRevokePost200Response> {
        const response = await this.deleteTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List tasks
     * Task.list
     */
    async listTasksRaw(requestParameters: ListTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListTasks200ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at&gt;'] = requestParameters['createdAt'];
        }

        if (requestParameters['createdAt2'] != null) {
            queryParameters['created_at&lt;'] = requestParameters['createdAt2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListTasks200ResponseInnerFromJSON));
    }

    /**
     * List tasks
     * Task.list
     */
    async listTasks(requestParameters: ListTasksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListTasks200ResponseInner>> {
        const response = await this.listTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a task
     * Task.update
     */
    async updateTaskRaw(requestParameters: UpdateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AuthGoogleRevokePost200Response>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling updateTask().'
            );
        }

        if (requestParameters['updateTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'updateTaskRequest',
                'Required parameter "updateTaskRequest" was null or undefined when calling updateTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tasks/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTaskRequestToJSON(requestParameters['updateTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AuthGoogleRevokePost200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a task
     * Task.update
     */
    async updateTask(requestParameters: UpdateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AuthGoogleRevokePost200Response> {
        const response = await this.updateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
