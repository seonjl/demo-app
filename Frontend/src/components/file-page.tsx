/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Lno4auG5B2i
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Chivo } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { ListFiles200ResponseInner } from "@/api/client";
import { useDownloadFile, useUploadFile } from "@/api/useFile";
import { Card, CardContent } from "@/components/ui/card";
import { useToast } from "@/components/ui/use-toast";
import { cn, isoStringToNdaysAgoOrHoursAgoOrMinutesAgo } from "@/lib/utils";
import { useQueryClient } from "@tanstack/react-query";
import { LoaderCircle } from "lucide-react";
import React, { useState } from "react";

export function FileUploadCard() {
  const queryClient = useQueryClient();
  const [isDragging, setIsDragging] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const { toast } = useToast();

  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = () => {
    setIsDragging(false);
  };

  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    setIsDragging(false);

    const files = event.dataTransfer.files;
    handleFilesUploading(files);
  };

  const { mutate: getUploadUrl } = useUploadFile();

  const handleFilesUploading = async (files: FileList) => {
    setIsUploading(true);
    getUploadUrl(
      {
        uploadFileRequest: {
          name: files[0].name,
          metadata: {
            size: String(files[0].size),
            type: files[0].type,
          },
        },
      },
      {
        onSuccess: (data) => {
          const formData = new FormData();
          formData.append("file", files[0]);

          fetch(data.url, {
            method: "PUT",
            body: formData,
          }).then(() => {
            queryClient.invalidateQueries({
              queryKey: ["listFiles"],
            });
            setIsUploading(false);
            toast({
              title: files[0].name + " uploaded",
            });
          });
        },
      }
    );
  };

  const handleBrowseFiles = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;

    if (files) handleFilesUploading(files);
  };

  return (
    <Card
      className={cn(
        "p-4 flex items-center justify-center h-32 border-2 rounded-lg hover:bg-gray-50 cursor-pointer",
        isDragging ? "border-blue-500" : "border-dashed border-muted",
        isUploading ? "opacity-50 pointer-events-none" : ""
      )}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
    >
      <div className="flex items-center">
        {isUploading && <LoaderCircle className="animate-spin items-center" />}
      </div>
      <CardContent>
        <div className={cn("text-center space-y-2 ")}>
          <CloudUploadIcon className="w-10 h-10 text-muted-foreground" />
          <p className="text-muted-foreground">
            Drag and drop files here or{" "}
            <label className="text-primary underline cursor-pointer">
              browse
              <input
                type="file"
                className="hidden"
                multiple
                onChange={handleBrowseFiles}
              />
            </label>
          </p>
        </div>
      </CardContent>
    </Card>
  );
}

export function FileCard({ file }: { file: ListFiles200ResponseInner }) {
  const {
    mutate: downloadFile,
    isPending: isDownloadFilePending,
    isSuccess: isDownloadFileSuccess,
    isError: isDownloadFileError,
  } = useDownloadFile();

  return (
    <Card
      className="p-4 flex flex-col gap-4 hover:bg-gray-50 cursor-pointer"
      onClick={() => {
        downloadFile(
          {
            downloadFileRequest: {
              fileId: file.id,
              name: file.name,
            },
          },
          {
            onSuccess: (data) => {
              console.log(data.url);
              window.open(data.url, "_blank");
            },
          }
        );
      }}
    >
      <div className="flex items-center gap-4">
        <div className="bg-primary rounded-md p-2 flex items-center justify-center">
          <FileIcon className="w-6 h-6 text-primary-foreground" />
        </div>
        <div className="flex-1">
          <h3 className="font-semibold truncate">{file.name}</h3>
          <p className="text-sm text-muted-foreground">Document</p>
        </div>
      </div>
      <div className="flex items-center justify-between text-sm text-muted-foreground">
        <span>{byteToNB(file.size)}</span>
        <span>{isoStringToNdaysAgoOrHoursAgoOrMinutesAgo(file.createdAt)}</span>
      </div>
    </Card>
  );
}

function byteToNB(bytes: string | number | undefined) {
  if (bytes === undefined || bytes === 0) {
    return "0 Byte";
  }

  const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
  const i = Math.floor(Math.log(Number(bytes)) / Math.log(1024));

  return `${parseFloat((Number(bytes) / Math.pow(1024, i)).toFixed(2))} ${
    sizes[i]
  }`;
}

function FileIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
    </svg>
  );
}

function FileSpreadsheetIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M8 13h2" />
      <path d="M14 13h2" />
      <path d="M8 17h2" />
      <path d="M14 17h2" />
    </svg>
  );
}

function ImageIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="18" height="18" x="3" y="3" rx="2" ry="2" />
      <circle cx="9" cy="9" r="2" />
      <path d="m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" />
    </svg>
  );
}

function PresentationIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M2 3h20" />
      <path d="M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3" />
      <path d="m7 21 5-5 5 5" />
    </svg>
  );
}

function UploadIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
      <polyline points="17 8 12 3 7 8" />
      <line x1="12" x2="12" y1="3" y2="15" />
    </svg>
  );
}

function VideoIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5" />
      <rect x="2" y="6" width="14" height="12" rx="2" />
    </svg>
  );
}

function CloudUploadIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" />
      <path d="M12 12v9" />
      <path d="m16 16-4-4-4 4" />
    </svg>
  );
}
