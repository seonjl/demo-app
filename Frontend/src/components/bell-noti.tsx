/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/EVrfmv6F8hH
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import {
  useGetNotificationList,
  useReadNotification,
} from "@/api/useNotification";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { WebsocketContext } from "@/context/WebsocketContext";
import { isoStringToNdaysAgoOrHoursAgoOrMinutesAgo } from "@/lib/utils";
import { useQueryClient } from "@tanstack/react-query";
import { useContext } from "react";

export function BellNotifi() {
  const queryClient = useQueryClient();
  const {
    data: notifications,
    isSuccess,
    isLoading,
  } = useGetNotificationList();

  const websocketContext = useContext(WebsocketContext);

  const newMessages = websocketContext?.messages.filter(
    (message) => !message.isRead
  );
  const unreadNotifications = notifications?.filter(
    (notification) => !notification.isRead
  );

  const {
    mutate: markAsRead,
    isPending,
    isSuccess: markAsReadSuccess,
  } = useReadNotification();

  const handleClickNotificationItem = (notificationId: string) => {
    markAsRead(
      {
        notificationId,
        requestBody: {},
      },
      {
        onSuccess: (data) => {
          queryClient.invalidateQueries({
            queryKey: ["listNotifications"],
          });
        },
      }
    );
  };

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="icon" className="relative">
          <BellIcon className="h-5 w-5" />
          <span className="absolute -top-2 -right-2 flex h-4 w-4 items-center justify-center rounded-full bg-primary text-xs font-medium text-primary-foreground">
            {unreadNotifications?.length}
          </span>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="p-0">
        <Card className="shadow-none border-0">
          <CardHeader className="border-b">
            <CardTitle>Notifications</CardTitle>
            <CardDescription>
              You have {unreadNotifications?.length} unread messages.
            </CardDescription>
          </CardHeader>
          <CardContent className="p-6 max-h-[300px] overflow-y-auto">
            {notifications?.map((notification, index) => (
              <div
                key={index}
                className="mb-4 p-1 grid grid-cols-[25px_1fr] items-start pb-4 last:mb-0 last:pb-0 hover:bg-gray-100 cursor-pointer hover:rounded-md"
                onClick={() =>
                  notification.isRead ||
                  handleClickNotificationItem(notification.id)
                }
              >
                {notification.isRead ? (
                  <span className="flex h-2 w-2 translate-y-1.5 rounded-full bg-black-500" />
                ) : (
                  <span className="flex h-2 w-2 translate-y-1.5 rounded-full bg-red-500" />
                )}
                <div className="grid gap-1">
                  <div className="grid gap-1">
                    <p className="text-sm font-medium">{notification.title}</p>
                    <p className="col-end-5 text-sm text-muted-foreground truncate">
                      {isoStringToNdaysAgoOrHoursAgoOrMinutesAgo(
                        notification.createdAt
                      )}
                    </p>
                  </div>
                  <p className="text-sm text-muted-foreground truncate">
                    {notification.description}
                  </p>
                </div>
              </div>
            ))}
          </CardContent>
        </Card>
      </PopoverContent>
    </Popover>
  );
}

function BellIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9" />
      <path d="M10.3 21a1.94 1.94 0 0 0 3.4 0" />
    </svg>
  );
}
